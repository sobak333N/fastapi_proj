version: '3.8'

services:

  app:
    volumes:
      - ./:/app
    env_file:
      - .env
    build: 
      context: .
      dockerfile: app.Dockerfile
    ports:
      - 8000:8000
    depends_on:
      - db
      - redis
    networks:
      - app-network
      # gunicorn --workers $((KERNEL_AMOUNTS*2+1)) -k uvicorn.workers.UvicornWorker app.main:app --bind 0.0.0.0:8000
      # uvicorn app.main:app --host 0.0.0.0 --port 8000
    command: >
      bash -c " 
      alembic upgrade head && 
      KERNEL_AMOUNTS=$(nproc) &&  
      uvicorn app.main:app --host 0.0.0.0 --port 8000
      "

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 80:80
    depends_on:
      - app
    networks:
      - app-network

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - ${POSTGRES_OUTER_PORT}:${POSTGRES_INNER_PORT}
    networks:
      - app-network

  redis:
    image: redis:alpine
    networks:
      - app-network
    ports:
      - ${REDIS_OUTER_PORT}:${REDIS_INNER_PORT}

  test:
    build:
      context: .
      dockerfile: test.Dockerfile
    volumes:
      - ./:/app
    env_file:
      - .env
    depends_on:
      - app
      - db
      - redis
    networks:
      - app-network
    logging:
      driver: "none"  # Отключает сбор логов
    command: >
      bash -c "
      sleep 1 &&
      if [ \"$TESTING\" = \"TRUE\" ]; then
        alembic upgrade head &&
        pytest --disable-warnings --maxfail=1 --tb=short
      elif [ \"$TESTING\" = \"LOGS\" ]; then
        alembic upgrade head &&
        pytest -s --maxfail=1 --tb=short
      else
        echo 'TESTING=FALSE'
      fi
      "

  mongo:
    image: mongo:latest
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB}
    ports:
      - ${MONGO_OUTER_PORT}:${MONGO_INNER_PORT}
    networks:
      - app-network
    logging:
      driver: "none"

volumes:
  db_data:

networks:
  app-network:
    driver: bridge
